# ===========================================================================
#
#                            PUBLIC DOMAIN NOTICE
#               National Center for Biotechnology Information
#
#  This software/database is a "United States Government Work" under the
#  terms of the United States Copyright Act.  It was written as part of
#  the author's official duties as a United States Government employee and
#  thus cannot be copyrighted.  This software/database is freely available
#  to the public for use. The National Library of Medicine and the U.S.
#  Government have not placed any restriction on its use or reproduction.
#
#  Although all reasonable efforts have been taken to ensure the accuracy
#  and reliability of the software and data, the NLM and the U.S.
#  Government do not and cannot warrant the performance or results that
#  may be obtained by using this software or data. The NLM and the U.S.
#  Government disclaim all warranties, express or implied, including
#  warranties of performance, merchantability or fitness for any particular
#  purpose.
#
#  Please cite the author in any work or product based on this material.
#
# ===========================================================================

#-------------------------------------------------------------------------------
# popular targets
#

std: cmake_ext_tools

all: cmake_all_tools

test: runtests

#-------------------------------------------------------------------------------
#
# override from command line if necessary
CMAKE ?= cmake
CTEST ?= ctest

# determine shell environment
CONFIG_FILE = $(TOP)/build/Makefile.config
ifeq (no, $(shell test -f $(CONFIG_FILE) && echo yes || echo no))
    $(error "*** File '$(CONFIG_FILE)' is missing. Please run $(TOP)/configure")
endif

# determine SRCDIR
ifdef MODULE
    SRCDIR=$(TOP)/$(MODULE)
else
    SRCDIR=$(TOP)/
endif

# load build configuration
CURDIR = $(SRCDIR)
include $(CONFIG_FILE)

TEST_BINDIR = $(TARGDIR)/test-bin

# clean rules
clean: makedirs
	@-cd $(OBJDIR); $(CMAKE) --build . --target clean -- --no-print-directory

cclean: clean
	-rm -rf $(TARGDIR)

config:
	@ echo "Current configuration: $(CONFIGURED)"
	@ echo "CMake build directory: '$(TARGDIR)/obj'"
	@ echo "Output target directory: '$(TARGDIR)'"
	@ echo "Installation target directory: '$(abspath $(INST_BINDIR)/..)'"
	@ echo

#-------------------------------------------------------------------------------
# CMake bridge
#

ifeq (dbg,$(BUILD))
    CMAKE_BUILD = Debug
else
    CMAKE_BUILD = Release
endif

unexport TOP SRCDIR

export OS_DISTRIBUTOR

# CPP comes from Makefile.config.$(OS_ARCH)
# TODO: simplify Makefile.config.$(OS_ARCH) generated by ./configure - switch from using LD to a new variable
CMAKEFLAGS = \
    -DTARGDIR=$(TARGDIR)                        \
    -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=$(ILIBDIR) \
    -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$(LIBDIR)  \
    -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$(BINDIR)  \
    -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD)           \
    -DCMAKE_INSTALL_PREFIX=$(abspath $(INST_BINDIR)/..)    \
    -DCMAKE_C_COMPILER=$(shell which $(firstword $(CC)))   \
    -DCMAKE_CXX_COMPILER=$(shell which $(CPP))  \
    -DVDB_BINDIR=$(abspath $(VDB_LIBDIR)/..)    \
    -DVDB_LIBDIR=$(VDB_LIBDIR)                  \
    -DVDB_INCDIR=$(VDB_INCDIR)                  \
    -DPYTHON_PATH=$(PYTHON)                     \
    -DDIRTOTEST=$(DIRTOTEST)                    \
    -DCONFIGTOUSE=$(CONFIGTOUSE)                \
    -DXML2_INCDIR=$(XML2_INCDIR)                \
    -DXML2_LIBDIR=$(XML2_LIBDIR)                \
    -DHDF5_INCDIR=$(HDF5_INCDIR)                \
    -DHDF5_LIBDIR=$(HDF5_LIBDIR)                \
    -DRUN_SANITIZER_TESTS=$(RUN_SANITIZER_TESTS)\
    -DRUN_SANITIZER_TESTS_OVERRIDE=$(RUN_SANITIZER_TESTS_OVERRIDE)\

ifeq (ON,$(BUILD_TOOLS_LOADERS))
    CMAKEFLAGS += -DBUILD_TOOLS_LOADERS=ON
else
    CMAKEFLAGS += -DBUILD_TOOLS_LOADERS=OFF
endif
ifeq (ON,$(BUILD_TOOLS_INTERNAL))
    CMAKEFLAGS += -DBUILD_TOOLS_INTERNAL=ON
else
    CMAKEFLAGS += -DBUILD_TOOLS_INTERNAL=OFF
endif
ifeq (ON,$(BUILD_TOOLS_TEST_TOOLS))
    CMAKEFLAGS += -DBUILD_TOOLS_TEST_TOOLS=ON
else
    CMAKEFLAGS += -DBUILD_TOOLS_TEST_TOOLS=OFF
endif

makedirs:
	mkdir -p $(TARGDIR)/obj

# Uncomment to get a lot of debug info from CMake's findLibrary and the like
#DEBUG_FIND=--debug-find

cmake_ext_tools: makedirs
	cd $(TARGDIR)/obj; $(CMAKE) $(CMAKEFLAGS) -DTOOLS_ONLY=ON $(DEBUG_FIND) $(TOP)
	+ make -C $(OBJDIR) --no-print-directory

cmake_all_tools: makedirs
	cd $(TARGDIR)/obj; $(CMAKE) $(CMAKEFLAGS) -DTOOLS_ONLY=ON \
	    -DBUILD_TOOLS_INTERNAL=ON \
    	-DBUILD_TOOLS_LOADERS=ON \
    	-DBUILD_TOOLS_TEST_TOOLS=ON \
		$(DEBUG_FIND) $(TOP)
	+ make -C $(OBJDIR) --no-print-directory

cmake_with_tests: makedirs
	cd $(TARGDIR)/obj; $(CMAKE) $(CMAKEFLAGS) -DTOOLS_ONLY=OFF \
		$(DEBUG_FIND) $(TOP)
	+ make -C $(OBJDIR) --no-print-directory

cmake_only: makedirs
	cd $(TARGDIR)/obj; cmake $(CMAKEFLAGS) $(TOP)

cmake: cmake_only
	+ make -C $(OBJDIR) --no-print-directory

runtests: cmake_with_tests
	cd $(OBJDIR); $(CTEST) $(CMAKEFLAGS) --build-exe-dir $(BINDIR) $(CTESTARGS) -E "^SlowTest_" --verbose

slowtests: cmake_with_tests
	cd $(OBJDIR); $(CTEST) $(CMAKEFLAGS) --build-exe-dir $(BINDIR) $(CTESTARGS) --verbose

cinstall: cmake_ext_tools
	+ make -C $(TARGDIR)/obj install

COVERAGE_ROOT ?= $(TOP) -f $(abspath $(VDB_INCDIR)/..)
COVERAGE_ARGS ?= --branches --print-summary

coverage: makedirs
	+ cd $(TARGDIR)/obj; cmake $(CMAKEFLAGS) -DTOOLS_ONLY=OFF -DCOVERAGE=ON $(TOP)
	+ make -C $(OBJDIR) --no-print-directory
	+ cd $(OBJDIR); ctest $(CMAKEFLAGS) --build-exe-dir $(BINDIR) $(CTESTARGS)
	+ gcovr -f $(COVERAGE_ROOT) $(COVERAGE_ARGS) --output $(OBJDIR)/coverage $(TARGDIR) $(abspath $(VDB_LIBDIR)/..)
	$ echo "The coverage report is in $(OBJDIR)/coverage"

.PHONY: makedirs cmake_ext_tools cmake_with_tests all_tools cinstall test runtests slowtests coverage

#-------------------------------------------------------------------------------
# install
#
install: cinstall

.PHONY: install

#-------------------------------------------------------------------------------
# help
#
# TODO:
help:
	@ echo
	@ echo "Before initial build, run './configure --build-prefix=<out>' from"
	@ echo "the project root to set the output directory of your builds and"
	@ echo "other parameters."
	@ echo "Run ./configure -h for full description."
	@ echo
	@ echo "Make targets:"
	@ echo " help            : this text"
	@ echo " config          : print a summary of current configuration"
	@ echo " std             : build the toolkit (default)"
	@ echo " all             : build all tools, including internal and test-helpers"
	@ echo " clean           : remove build results; does not remove CMake-generated files"
	@ echo " cclean          : remove build results and CMake-generated files"
	@ echo " test, runtests  : build all tools and run fast tests"
	@ echo " slowtests       : build all tools and run all (fast and slow) tests"
	@ echo " coverage        : build, run all tests, create a test coverage report"
	@ echo " coverage-help   : more detailed help on creating test coverage reports"
	@ echo " install         : build the toolkit, install to $(abspath $(INST_BINDIR)/..)"
	@ echo
	@ echo The build uses CMake. CMake-generated files are in $(OBJDIR)
	@ echo
	@ echo It is recommended to use 'make -j' for quicker builds.
	@ echo

coverage-help:
	@ echo
	@ echo "Creating test coverage reports using gcovr (Linux only):"
	@ echo "	- It is recommended to re-initialize the build and coverage data first, by running 'make cclean'".
	@ echo "	- Run 'make coverage' to execute all tests (can take a long time)."
	@ echo "	- Location of the coverage results file is displayed at the end of the run."
	@ echo "	- Run 'make coverage CTESTARGS=\"-E Slow\"' to exclude slow tests"
	@ echo "	- Run 'make coverage CTESTARGS=\"-R <TestName>\"' to execute only tests whose name starts with <TestName>"
	@ echo "	- Use COVERAGE_ROOT to limit the data collection area, e.g. 'make coverage COVERAGE_ROOT=$(TOP)/tools/fasterq-dump' will only collect coverage data on source files in the given directory and below."
	@ echo "	- Use COVERAGE_ARGS to pass arguments to gcovr, e.g. 'make coverage COVERAGE_ARGS=\"--json-pretty --sort-percentage\"'. The default arguments are '--branches --print-summary'. run 'gcovr -h' for the list of available arguments."
	@ echo "	- The coverage data is accumulated across multiple runs. To clear the data, run 'make cclean'."
	@ echo

.PHONY: help coverage-help

#-------------------------------------------------------------------------------

.PHONY: all std


# TODO: add support for fuzz testing
FLIBDIR = $(TARGDIR)/fuzz

$(FLIBDIR):
	mkdir -p $@

fuzz: makedirs
